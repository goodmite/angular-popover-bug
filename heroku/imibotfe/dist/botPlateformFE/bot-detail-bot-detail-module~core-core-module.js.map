{"version":3,"sources":["webpack:///./src/app/core/bot-detail/bot-sessions/bot-sessions.component.html","webpack:///./src/app/core/bot-detail/bot-sessions/bot-sessions.component.scss","webpack:///./src/app/core/bot-detail/bot-sessions/bot-sessions.component.ts","webpack:///./src/app/object-array-crud.service.ts"],"names":[],"mappings":"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","file":"bot-detail-bot-detail-module~core-core-module.js","sourcesContent":["module.exports = \"<div *ngIf=\\\"sessions\\\">\\r\\n  <app-smart-table [data]=\\\"sessions\\\"\\r\\n                   [totalRecords]=\\\"totalSessionRecords\\\"\\r\\n                   (customActionEvents)=\\\"customActionEventsTriggeredInSessionsTable($event,reasonForDecryptionTemplate)\\\"\\r\\n                   (rowClicked$)=\\\"sessionTableRowClicked($event, sessionDetailTemplate, reasonForDecryptionTemplate)\\\"\\r\\n                   (pageChanged$)=\\\"loadSessionTableDataForGivenPage($event)\\\"\\r\\n                   [showSearchInDbButton]=\\\"true\\\"\\r\\n                   (refreshData$)=\\\"loadSmartTableSessionData()\\\"\\r\\n                   [showRefreshButton]=\\\"true\\\"\\r\\n                   (performSearchInDB$)=\\\"performSearchInDbForSession($event)\\\"\\r\\n                   [settings]=\\\"smartTableSettings_Sessions\\\"></app-smart-table>\\r\\n</div>\\r\\n\\r\\n\\r\\n<ng-template #sessionDetailTemplate>\\r\\n  <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <app-session-detail-model\\r\\n        [session]=\\\"selectedRow_Session\\\"\\r\\n        [bot]=\\\"bot\\\"\\r\\n        (selectNextRow)=\\\"selectNextRow()\\\"\\r\\n        (closeModel$)=\\\"modalRef.hide()\\\"\\r\\n        (selectPrevRow)=\\\"selectPrevRow()\\\"\\r\\n        [pageNumberOfCurrentRowSelected]=\\\"pageNumberOfCurrentRowSelected\\\"\\r\\n        [indexOfCurrentRowSelected]=\\\"indexOfCurrentRowSelected\\\"\\r\\n        [finalDfState]=\\\"selectedRow_Session.df_state\\\"\\r\\n        [sessionDataStore]=\\\"selectedRow_Session.data_store\\\">\\r\\n      </app-session-detail-model>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n<!---->\\r\\n<ng-template #reasonForDecryptionTemplate>\\r\\n  <div class=\\\"primary-modal\\\">\\r\\n    <div class=\\\"top-dec\\\"></div>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n      <h4 class=\\\"modal-title mb-2\\\" style=\\\"display: flex;justify-content: start;\\\">Reason for decryption</h4>\\r\\n      <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"modalRef.hide()\\\">\\r\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n      </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body pt-0\\\">\\r\\n     <form #form=\\\"ngForm\\\">\\r\\n       <div class=\\\"text-center my-1\\\">\\r\\n         <label for=\\\"\\\" class=\\\"mr-1\\\">Reason</label>\\r\\n         <input type=\\\"text\\\" required style=\\\"border-radius: 0px !important;\\\" [(ngModel)] = \\\"decryptReason\\\" name=\\\"decryptReason\\\">\\r\\n       </div>\\r\\n       <button [disabled]=\\\"!form.valid\\\" class=\\\" btn btn-theme-success-sm\\\" (click)=\\\"decryptSubmit(sessionItemToBeDecrypted.id);modalRef.hide()\\\">Submit</button>\\r\\n     </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\"","module.exports = \".danger-modal {\\n  background-color: white;\\n  margin-top: 0;\\n  border-radius: 4px;\\n  font-family: Helvetica; }\\n  .danger-modal .top-dec {\\n    border-top-left-radius: 4px;\\n    border-top-right-radius: 4px;\\n    height: 10px;\\n    background-color: #b14250; }\\n  .danger-modal .modal-header {\\n    color: #474747; }\\n  .danger-modal .modal-header .modal-title {\\n      width: 100%;\\n      font-size: 20px;\\n      text-align: center;\\n      color: #474747; }\\n  .danger-modal .modal-body {\\n    color: #474747;\\n    font-size: 12px;\\n    text-align: center;\\n    padding-bottom: 10px; }\\n  .primary-modal {\\n  background-color: white;\\n  margin-top: 0;\\n  border-radius: 4px;\\n  font-family: Helvetica; }\\n  .primary-modal .top-dec {\\n    border-top-left-radius: 4px;\\n    border-top-right-radius: 4px;\\n    height: 10px;\\n    background-color: #00abd3; }\\n  .primary-modal .modal-header {\\n    color: #474747; }\\n  .primary-modal .modal-header .modal-title {\\n      width: 100%;\\n      font-size: 20px;\\n      text-align: center;\\n      color: #474747; }\\n  .primary-modal .modal-body {\\n    color: #474747;\\n    font-size: 12px;\\n    text-align: center;\\n    padding-bottom: 10px; }\\n\"","import {Component, ElementRef, Input, OnInit, TemplateRef, ViewChild} from '@angular/core';\r\nimport {Store, Select} from '@ngxs/store';\r\nimport {IConsumerResults} from '../../../../interfaces/consumer';\r\nimport {ServerService} from '../../../server.service';\r\nimport {Observable} from 'rxjs';\r\nimport {ConstantsService} from '../../../constants.service';\r\nimport {ISessionItem, ISessionMessage, ISessions} from '../../../../interfaces/sessions';\r\nimport {of} from 'rxjs';\r\nimport {BsModalRef, BsModalService} from 'ngx-bootstrap';\r\nimport {IBot} from '../../interfaces/IBot';\r\nimport {SmartTableComponent} from '../../../smart-table/smart-table.component';\r\nimport {UtilityService} from '../../../utility.service';\r\nimport {IHeaderData} from '../../../../interfaces/header-data';\r\nimport {findIndex} from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-bot-sessions',\r\n  templateUrl: './bot-sessions.component.html',\r\n  styleUrls: ['./bot-sessions.component.scss']\r\n})\r\nexport class BotSessionsComponent implements OnInit {\r\n\r\n  @Select(state => state.botlist.codeBasedBotList) codeBasedBotList$: Observable<IBot[]>;\r\n  @Input() id: string;\r\n  test = 'asdasdsd';\r\n  @Input() bot: IBot;\r\n  sessionItemToBeDecrypted: ISessionItem;\r\n  @ViewChild(SmartTableComponent) smartTableComponent: SmartTableComponent;\r\n  sessions$: Observable<ISessions>;\r\n  refreshSessions$: Observable<ISessions>;\r\n  url: string;\r\n  modalRef: BsModalRef;\r\n  smartTableSettings_Sessions = this.constantsService.SMART_TABLE_SESSIONS_SETTING;\r\n  selectedRow_Session: ISessionItem;\r\n  selectedRow_number: number = 0;\r\n  totalSessionRecords: number = 0;\r\n  sessions: ISessionItem[];\r\n  showNextButton: boolean;\r\n  showPrevButton: boolean;\r\n  pageNumberOfCurrentRowSelected: number = 1;\r\n  indexOfCurrentRowSelected: number;\r\n  decryptReason: string;\r\n\r\n  constructor(\r\n    private serverService: ServerService,\r\n    private utilityService: UtilityService,\r\n    private constantsService: ConstantsService,\r\n    private store: Store,\r\n    private modalService: BsModalService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadSmartTableSessionData();\r\n    // this.loadSessionTableDataForGivenPage(1);\r\n    // this.sessions$ = this.serverService.makeGetReq<ISessions>({ url: this.url, headerData: { 'bot-access-token': this.bot.bot_access_token } });\r\n    // this.sessions$\r\n    //   .map((value) => {\r\n    //     return {\r\n    //       ...value,\r\n    //       objects: value.objects.map((result) => {\r\n    //         let modified_update_at = (new Date(result.updated_at)).toDateString();\r\n    //         return { ...result, updated_at: modified_update_at };\r\n    //       })\r\n    //     };\r\n    //   })\r\n    //   .subscribe((value) => {\r\n    //     if (!value) return;\r\n    //     this.totalSessionRecords = value.meta.total_count;\r\n    //     this.sessions = value.objects;\r\n    //   });\r\n  }\r\n\r\n  /*todo: implement it better way*/\r\n  refreshSession() {\r\n    this.url = this.constantsService.getBotSessionsUrl(10, 0);\r\n    this.refreshSessions$ = this.serverService.makeGetReq<ISessions>({url: this.url});\r\n    this.refreshSessions$.subscribe((value) => {\r\n      this.sessions$ = of(value);\r\n    });\r\n  }\r\n\r\n  loadSmartTableSessionData() {\r\n    this.loadSessionTableDataForGivenPage(this.pageNumberOfCurrentRowSelected);\r\n    // this.sessions$ = this.serverService.makeGetReq<ISessions>({ url: this.url, headerData: { 'bot-access-token': this.bot.bot_access_token } });\r\n    // this.sessions$\r\n    //   .map((value) => {\r\n    //     return {\r\n    //       ...value,\r\n    //       objects: value.objects.map((result) => {\r\n    //         let modified_update_at = (new Date(result.updated_at)).toDateString();\r\n    //         return { ...result, updated_at: modified_update_at };\r\n    //       })\r\n    //     };\r\n    //   })\r\n    //   .subscribe((value) => {\r\n    //     if (!value) return;\r\n    //     this.totalSessionRecords = value.meta.total_count;\r\n    //     this.sessions = value.objects;\r\n    //   });\r\n  }\r\n\r\n  sessionTableRowClicked(eventData: { data: ISessionItem }, template?, reasonForDecryptionTemplate?) {\r\n    let isEncrypted: boolean;\r\n    /*\r\n      * TODO: there is a data_encrypted key it the row itself. Can we use it?\r\n    * Why do we need to go fetch first message to see if its decrypted or not?\r\n    * */\r\n    if (eventData.data.data_encrypted) {\r\n\r\n      // this.sessionItemToBeDecrypted = eventData.data;\r\n      // this.openSessionRowDecryptModal(reasonForDecryptionTemplate);\r\n      this.openSessionRowDecryptModal(this.reasonForDecryptionTemplate, eventData.data);\r\n    }\r\n    else {\r\n      this.loadSessionMessagesById(eventData.data.id)\r\n        .subscribe((value: any) => {\r\n          this.selectedRow_Session = this.sessions.find(session => session.id === eventData.data.id);\r\n\r\n          // (<any>this.selectedRow_Session).highlight = true;\r\n          if (this.indexOfCurrentRowSelected !== undefined)\r\n            this.sessions[this.indexOfCurrentRowSelected].highlight = false;\r\n          this.indexOfCurrentRowSelected = this.sessions.findIndex((session) => {\r\n            return this.selectedRow_Session.id === session.id;\r\n          });\r\n          this.sessions[this.indexOfCurrentRowSelected].highlight = true;\r\n\r\n          // this.openModal(template);\r\n          this.openModal(this.sessionDetailTemplate);\r\n\r\n        });\r\n    }\r\n\r\n\r\n  }\r\n\r\n  openModal(template: TemplateRef<any>) {\r\n    this.modalRef = this.modalService.show(template, {class: 'modal-xlg'});\r\n  }\r\n\r\n  loadSessionTableDataForGivenPage(pageNumber) {\r\n\r\n    this.pageNumberOfCurrentRowSelected = pageNumber;\r\n    this.url = this.constantsService.getBotSessionsUrl(10, (pageNumber - 1) * 10);\r\n    let headerData: IHeaderData = {\r\n      'bot-access-token': this.bot.bot_access_token\r\n    };\r\n    this.serverService.makeGetReq<ISessions>({url: this.url, headerData})\r\n      .subscribe((value) => {\r\n        this.totalSessionRecords = value.meta.total_count;\r\n        this.selectedRow_Session = value.objects[this.selectedRow_number || 0];\r\n        this.sessions = value.objects;\r\n\r\n        // if (this.indexOfCurrentRowSelected !== undefined && this.sessions[this.indexOfCurrentRowSelected].isEncrypted === false) {\r\n        //   this.sessions[this.indexOfCurrentRowSelected].highlight = true;\r\n        // } else {\r\n        //   try {\r\n        //     this.modalRef.hide();\r\n        //   } catch (e) {\r\n        //     console.error(e);\r\n        //   }\r\n        //   // this.sessionTableRowClicked({data: this.sessions[this.indexOfCurrentRowSelected]});\r\n        // }\r\n      });\r\n  }\r\n\r\n  @ViewChild('reasonForDecryptionTemplate') reasonForDecryptionTemplate: TemplateRef<any>;\r\n  @ViewChild('sessionDetailTemplate') sessionDetailTemplate: TemplateRef<any>;\r\n\r\n  selectNextRow() {\r\n    // this.selectedRow_Session\r\n    let newSelectedRow_Session: ISessionItem;// = {...this.selectedRow_Session};\r\n\r\n    if (this.indexOfCurrentRowSelected !== undefined)/*removing the highlighted color from the old selected table row*/\r\n      this.sessions[this.indexOfCurrentRowSelected].highlight = false;\r\n\r\n    let currentIndex = this.sessions.findIndex((session) => {/*old selected row index*/\r\n      // return this.selectedRow_Session.id === session.id;\r\n      return this.selectedRow_Session.id === session.id;\r\n    });\r\n    if (currentIndex <= this.sessions.length - 2) {\r\n      newSelectedRow_Session = this.sessions[++currentIndex];\r\n      this.indexOfCurrentRowSelected = currentIndex;\r\n      this.sessions[this.indexOfCurrentRowSelected].highlight = true;\r\n      if (newSelectedRow_Session.data_encrypted) {\r\n        // this.customActionEventsTriggeredInSessionsTable({data:selectedRow_SessionClone,action:'decrypt',source:null});\r\n        this.preOpenDecryptionModal();\r\n      }else {\r\n        this.selectedRow_Session=  newSelectedRow_Session;\r\n      }\r\n    }\r\n    else {/*new page is needed to be loaded*/\r\n      this.smartTableComponent.goToNextPage();\r\n      this.selectedRow_number = 0;\r\n      this.indexOfCurrentRowSelected = 0;\r\n    }\r\n\r\n    // if (this.indexOfCurrentRowSelected !== undefined)\r\n    //   this.sessions[this.indexOfCurrentRowSelected].highlight = true;\r\n  }\r\n\r\n  preOpenDecryptionModal(){\r\n    this.modalRef.hide();\r\n    let sessionToBeDecrypted = this.sessions[this.indexOfCurrentRowSelected];\r\n    this.openSessionRowDecryptModal(this.reasonForDecryptionTemplate, sessionToBeDecrypted);\r\n    return;\r\n  }\r\n\r\n  selectPrevRow() {\r\n    if (this.indexOfCurrentRowSelected !== undefined)\r\n      this.sessions[this.indexOfCurrentRowSelected].highlight = false;\r\n    let currentIndex = this.sessions.findIndex((session) => {\r\n      return this.selectedRow_Session.id === session.id;\r\n    });\r\n\r\n    this.indexOfCurrentRowSelected = currentIndex;\r\n    let newSelectedRow_Session:ISessionItem;\r\n\r\n    if (currentIndex >= 1) {\r\n      newSelectedRow_Session = this.sessions[--currentIndex];\r\n      this.indexOfCurrentRowSelected = currentIndex;\r\n      this.sessions[this.indexOfCurrentRowSelected].highlight = true;\r\n      if (newSelectedRow_Session.data_encrypted) {\r\n        // this.customActionEventsTriggeredInSessionsTable({data:selectedRow_SessionClone,action:'decrypt',source:null});\r\n        this.preOpenDecryptionModal();\r\n      }else {\r\n        this.selectedRow_Session=  newSelectedRow_Session;\r\n      }\r\n    }\r\n    else {\r\n      this.smartTableComponent.goToPrevPage();\r\n      this.selectedRow_number = 9;\r\n      this.indexOfCurrentRowSelected = 9;\r\n    }\r\n    if (this.indexOfCurrentRowSelected !== undefined)\r\n      this.sessions[this.indexOfCurrentRowSelected].highlight = true;\r\n\r\n  }\r\n\r\n  customActionEventsTriggeredInSessionsTable(data: { action: string, data: ISessionItem, source: any }, Primarytemplate) {\r\n\r\n    if (data.action === 'download') {\r\n      /*download the conversation for the record*/\r\n      this.loadSessionMessagesById(data.data.id)\r\n        .subscribe((value: any) => {\r\n          let dataToDownload = value.objects;\r\n          if (dataToDownload.length === 0) {\r\n            dataToDownload = [{name: 'No Data'}];\r\n            this.utilityService.downloadArrayAsCSV(dataToDownload, {name: 'No Data'});\r\n          } else {\r\n            this.utilityService.downloadArrayAsCSV(dataToDownload);\r\n          }\r\n        });\r\n    }\r\n    if (data.action === 'decrypt') {\r\n      /*use dcrypt api*/\r\n\r\n      let sessionItemToBeDecrypted = data.data;\r\n      this.openSessionRowDecryptModal(Primarytemplate, sessionItemToBeDecrypted);\r\n\r\n    }\r\n  }\r\n\r\n  decryptSubmit(sessionTobeDecryptedId: number) {\r\n    let headerData: IHeaderData = {\r\n      'bot-access-token': this.bot.bot_access_token\r\n    };\r\n    let body = {'room_id': sessionTobeDecryptedId, 'decrypt_audit_type': 'room', 'message': this.decryptReason};\r\n    let url = this.constantsService.getDecryptUrl();\r\n    this.serverService.makePostReq({headerData, body, url})\r\n      .subscribe(() => {\r\n        this.decryptReason = null;\r\n        let surl = this.constantsService.getSessionsByIdUrl(sessionTobeDecryptedId);\r\n        this.serverService.makeGetReq({url: surl, headerData})\r\n          .subscribe((newSession: ISessionItem) => {\r\n\r\n            let del = this.sessions.findIndex((session) => session.id === sessionTobeDecryptedId);\r\n            this.sessions[del] = {...newSession};\r\n            this.sessions = [...this.sessions];\r\n          });\r\n      });\r\n\r\n  }\r\n\r\n  openSessionRowDecryptModal(template: TemplateRef<any>, sessionToBeDecrypted: ISessionItem) {\r\n    this.sessionItemToBeDecrypted = sessionToBeDecrypted;\r\n    this.modalRef = this.modalService.show(template, {class: 'modal-md'});\r\n  }\r\n\r\n  loadSessionMessagesById(id) {\r\n    this.url = this.constantsService.getSessionsMessageUrl(id);\r\n    return this.serverService.makeGetReq<ISessionItem>({\r\n      url: this.url,\r\n      headerData: {'bot-access-token': this.bot.bot_access_token}\r\n    });\r\n  }\r\n\r\n  loadSessionById(id) {\r\n    // this.url = this.constantsService.getSessionsMessageUrl(id);\r\n    this.url = this.constantsService.getSessionsByIdUrl(id);\r\n    return this.serverService.makeGetReq<ISessionItem>({\r\n      url: this.url,\r\n      headerData: {'bot-access-token': this.bot.bot_access_token}\r\n    });\r\n  }\r\n\r\n  performSearchInDbForSession(data) {\r\n    this.loadSessionById(data['Room ID'])\r\n      .subscribe((session: ISessionItem) => {\r\n        this.sessions.push(session);\r\n        this.sessions = [...this.sessions];\r\n      });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {IPipelineItem} from '../interfaces/ai-module';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ObjectArrayCrudService {\r\n\r\n  constructor() { }\r\n\r\n\r\n  // removeItemById(array:IAIModule[], id:string):IAIModule[]{\r\n  //   if(!array || !id ) return;\r\n  //   for(let i=0;i<array.length;++i){\r\n  //     if(array[i].id == id ){\r\n  //       array.splice(i,1);\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // pushUniqueById(array:IAIModule[], obj:IAIModule):IAIModule[]{\r\n  //   if(!array || !obj || !obj.id ) return;\r\n  //\r\n  //   let objId = obj.id;\r\n  //   for(let i=0;i<array.length;++i){\r\n  //     if(array[i].id === obj ){\r\n  //       return;\r\n  //     }\r\n  //   }\r\n  //   array.push(obj);\r\n  //   return array;\r\n  // }\r\n  getObjectItemByKeyValuePair(array:any[], obj:object){\r\n    let key = Object.keys(obj)[0];\r\n    let value =  obj[key];\r\n    let x = array.find(item => {\r\n      return item[key] === value;\r\n    })\r\n    return x;\r\n  }\r\n}\r\n"],"sourceRoot":""}